// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colors.proto

#ifndef PROTOBUF_colors_2eproto__INCLUDED
#define PROTOBUF_colors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace c22dlink {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_colors_2eproto();
void protobuf_AssignDesc_colors_2eproto();
void protobuf_ShutdownFile_colors_2eproto();

class RGB;
class YUV;
class ColorInfo;
class ColorsInfo;
class RequestColors;

// ===================================================================

class RGB : public ::google::protobuf::Message {
 public:
  RGB();
  virtual ~RGB();

  RGB(const RGB& from);

  inline RGB& operator=(const RGB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGB& default_instance();

  void Swap(RGB* other);

  // implements Message ----------------------------------------------

  RGB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGB& from);
  void MergeFrom(const RGB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);

  // required int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);

  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:c22dlink.RGB)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  friend void  protobuf_AddDesc_colors_2eproto();
  friend void protobuf_AssignDesc_colors_2eproto();
  friend void protobuf_ShutdownFile_colors_2eproto();

  void InitAsDefaultInstance();
  static RGB* default_instance_;
};
// -------------------------------------------------------------------

class YUV : public ::google::protobuf::Message {
 public:
  YUV();
  virtual ~YUV();

  YUV(const YUV& from);

  inline YUV& operator=(const YUV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YUV& default_instance();

  void Swap(YUV* other);

  // implements Message ----------------------------------------------

  YUV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YUV& from);
  void MergeFrom(const YUV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 y = 1;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 1;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 u = 2;
  inline bool has_u() const;
  inline void clear_u();
  static const int kUFieldNumber = 2;
  inline ::google::protobuf::int32 u() const;
  inline void set_u(::google::protobuf::int32 value);

  // required int32 v = 3;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 3;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:c22dlink.YUV)
 private:
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_u();
  inline void clear_has_u();
  inline void set_has_v();
  inline void clear_has_v();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 u_;
  ::google::protobuf::int32 v_;
  friend void  protobuf_AddDesc_colors_2eproto();
  friend void protobuf_AssignDesc_colors_2eproto();
  friend void protobuf_ShutdownFile_colors_2eproto();

  void InitAsDefaultInstance();
  static YUV* default_instance_;
};
// -------------------------------------------------------------------

class ColorInfo : public ::google::protobuf::Message {
 public:
  ColorInfo();
  virtual ~ColorInfo();

  ColorInfo(const ColorInfo& from);

  inline ColorInfo& operator=(const ColorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorInfo& default_instance();

  void Swap(ColorInfo* other);

  // implements Message ----------------------------------------------

  ColorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorInfo& from);
  void MergeFrom(const ColorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .c22dlink.RGB rgb = 2;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 2;
  inline const ::c22dlink::RGB& rgb() const;
  inline ::c22dlink::RGB* mutable_rgb();
  inline ::c22dlink::RGB* release_rgb();
  inline void set_allocated_rgb(::c22dlink::RGB* rgb);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double merge = 4;
  inline bool has_merge() const;
  inline void clear_merge();
  static const int kMergeFieldNumber = 4;
  inline double merge() const;
  inline void set_merge(double value);

  // required int32 expected = 5;
  inline bool has_expected() const;
  inline void clear_expected();
  static const int kExpectedFieldNumber = 5;
  inline ::google::protobuf::int32 expected() const;
  inline void set_expected(::google::protobuf::int32 value);

  // required .c22dlink.YUV yuvLow = 6;
  inline bool has_yuvlow() const;
  inline void clear_yuvlow();
  static const int kYuvLowFieldNumber = 6;
  inline const ::c22dlink::YUV& yuvlow() const;
  inline ::c22dlink::YUV* mutable_yuvlow();
  inline ::c22dlink::YUV* release_yuvlow();
  inline void set_allocated_yuvlow(::c22dlink::YUV* yuvlow);

  // required .c22dlink.YUV yuvHigh = 7;
  inline bool has_yuvhigh() const;
  inline void clear_yuvhigh();
  static const int kYuvHighFieldNumber = 7;
  inline const ::c22dlink::YUV& yuvhigh() const;
  inline ::c22dlink::YUV* mutable_yuvhigh();
  inline ::c22dlink::YUV* release_yuvhigh();
  inline void set_allocated_yuvhigh(::c22dlink::YUV* yuvhigh);

  // @@protoc_insertion_point(class_scope:c22dlink.ColorInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rgb();
  inline void clear_has_rgb();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_merge();
  inline void clear_has_merge();
  inline void set_has_expected();
  inline void clear_has_expected();
  inline void set_has_yuvlow();
  inline void clear_has_yuvlow();
  inline void set_has_yuvhigh();
  inline void clear_has_yuvhigh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::c22dlink::RGB* rgb_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 expected_;
  double merge_;
  ::c22dlink::YUV* yuvlow_;
  ::c22dlink::YUV* yuvhigh_;
  friend void  protobuf_AddDesc_colors_2eproto();
  friend void protobuf_AssignDesc_colors_2eproto();
  friend void protobuf_ShutdownFile_colors_2eproto();

  void InitAsDefaultInstance();
  static ColorInfo* default_instance_;
};
// -------------------------------------------------------------------

class ColorsInfo : public ::google::protobuf::Message {
 public:
  ColorsInfo();
  virtual ~ColorsInfo();

  ColorsInfo(const ColorsInfo& from);

  inline ColorsInfo& operator=(const ColorsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorsInfo& default_instance();

  void Swap(ColorsInfo* other);

  // implements Message ----------------------------------------------

  ColorsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorsInfo& from);
  void MergeFrom(const ColorsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .c22dlink.ColorInfo colors = 1;
  inline int colors_size() const;
  inline void clear_colors();
  static const int kColorsFieldNumber = 1;
  inline const ::c22dlink::ColorInfo& colors(int index) const;
  inline ::c22dlink::ColorInfo* mutable_colors(int index);
  inline ::c22dlink::ColorInfo* add_colors();
  inline const ::google::protobuf::RepeatedPtrField< ::c22dlink::ColorInfo >&
      colors() const;
  inline ::google::protobuf::RepeatedPtrField< ::c22dlink::ColorInfo >*
      mutable_colors();

  // @@protoc_insertion_point(class_scope:c22dlink.ColorsInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::c22dlink::ColorInfo > colors_;
  friend void  protobuf_AddDesc_colors_2eproto();
  friend void protobuf_AssignDesc_colors_2eproto();
  friend void protobuf_ShutdownFile_colors_2eproto();

  void InitAsDefaultInstance();
  static ColorsInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestColors : public ::google::protobuf::Message {
 public:
  RequestColors();
  virtual ~RequestColors();

  RequestColors(const RequestColors& from);

  inline RequestColors& operator=(const RequestColors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestColors& default_instance();

  void Swap(RequestColors* other);

  // implements Message ----------------------------------------------

  RequestColors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestColors& from);
  void MergeFrom(const RequestColors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c22dlink.RequestColors)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_colors_2eproto();
  friend void protobuf_AssignDesc_colors_2eproto();
  friend void protobuf_ShutdownFile_colors_2eproto();

  void InitAsDefaultInstance();
  static RequestColors* default_instance_;
};
// ===================================================================


// ===================================================================

// RGB

// required int32 r = 1;
inline bool RGB::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGB::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGB::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGB::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline ::google::protobuf::int32 RGB::r() const {
  // @@protoc_insertion_point(field_get:c22dlink.RGB.r)
  return r_;
}
inline void RGB::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.RGB.r)
}

// required int32 g = 2;
inline bool RGB::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGB::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGB::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGB::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 RGB::g() const {
  // @@protoc_insertion_point(field_get:c22dlink.RGB.g)
  return g_;
}
inline void RGB::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.RGB.g)
}

// required int32 b = 3;
inline bool RGB::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGB::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGB::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGB::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 RGB::b() const {
  // @@protoc_insertion_point(field_get:c22dlink.RGB.b)
  return b_;
}
inline void RGB::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.RGB.b)
}

// -------------------------------------------------------------------

// YUV

// required int32 y = 1;
inline bool YUV::has_y() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YUV::set_has_y() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YUV::clear_has_y() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YUV::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 YUV::y() const {
  // @@protoc_insertion_point(field_get:c22dlink.YUV.y)
  return y_;
}
inline void YUV::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.YUV.y)
}

// required int32 u = 2;
inline bool YUV::has_u() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YUV::set_has_u() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YUV::clear_has_u() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YUV::clear_u() {
  u_ = 0;
  clear_has_u();
}
inline ::google::protobuf::int32 YUV::u() const {
  // @@protoc_insertion_point(field_get:c22dlink.YUV.u)
  return u_;
}
inline void YUV::set_u(::google::protobuf::int32 value) {
  set_has_u();
  u_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.YUV.u)
}

// required int32 v = 3;
inline bool YUV::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YUV::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YUV::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YUV::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 YUV::v() const {
  // @@protoc_insertion_point(field_get:c22dlink.YUV.v)
  return v_;
}
inline void YUV::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.YUV.v)
}

// -------------------------------------------------------------------

// ColorInfo

// required int32 id = 1;
inline bool ColorInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ColorInfo::id() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.id)
  return id_;
}
inline void ColorInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.ColorInfo.id)
}

// optional .c22dlink.RGB rgb = 2;
inline bool ColorInfo::has_rgb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorInfo::set_has_rgb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorInfo::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorInfo::clear_rgb() {
  if (rgb_ != NULL) rgb_->::c22dlink::RGB::Clear();
  clear_has_rgb();
}
inline const ::c22dlink::RGB& ColorInfo::rgb() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.rgb)
  return rgb_ != NULL ? *rgb_ : *default_instance_->rgb_;
}
inline ::c22dlink::RGB* ColorInfo::mutable_rgb() {
  set_has_rgb();
  if (rgb_ == NULL) rgb_ = new ::c22dlink::RGB;
  // @@protoc_insertion_point(field_mutable:c22dlink.ColorInfo.rgb)
  return rgb_;
}
inline ::c22dlink::RGB* ColorInfo::release_rgb() {
  clear_has_rgb();
  ::c22dlink::RGB* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
inline void ColorInfo::set_allocated_rgb(::c22dlink::RGB* rgb) {
  delete rgb_;
  rgb_ = rgb;
  if (rgb) {
    set_has_rgb();
  } else {
    clear_has_rgb();
  }
  // @@protoc_insertion_point(field_set_allocated:c22dlink.ColorInfo.rgb)
}

// optional string name = 3;
inline bool ColorInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ColorInfo::name() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.name)
  return *name_;
}
inline void ColorInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:c22dlink.ColorInfo.name)
}
inline void ColorInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:c22dlink.ColorInfo.name)
}
inline void ColorInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:c22dlink.ColorInfo.name)
}
inline ::std::string* ColorInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:c22dlink.ColorInfo.name)
  return name_;
}
inline ::std::string* ColorInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColorInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:c22dlink.ColorInfo.name)
}

// required double merge = 4;
inline bool ColorInfo::has_merge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColorInfo::set_has_merge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColorInfo::clear_has_merge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColorInfo::clear_merge() {
  merge_ = 0;
  clear_has_merge();
}
inline double ColorInfo::merge() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.merge)
  return merge_;
}
inline void ColorInfo::set_merge(double value) {
  set_has_merge();
  merge_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.ColorInfo.merge)
}

// required int32 expected = 5;
inline bool ColorInfo::has_expected() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColorInfo::set_has_expected() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColorInfo::clear_has_expected() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColorInfo::clear_expected() {
  expected_ = 0;
  clear_has_expected();
}
inline ::google::protobuf::int32 ColorInfo::expected() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.expected)
  return expected_;
}
inline void ColorInfo::set_expected(::google::protobuf::int32 value) {
  set_has_expected();
  expected_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.ColorInfo.expected)
}

// required .c22dlink.YUV yuvLow = 6;
inline bool ColorInfo::has_yuvlow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ColorInfo::set_has_yuvlow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ColorInfo::clear_has_yuvlow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ColorInfo::clear_yuvlow() {
  if (yuvlow_ != NULL) yuvlow_->::c22dlink::YUV::Clear();
  clear_has_yuvlow();
}
inline const ::c22dlink::YUV& ColorInfo::yuvlow() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.yuvLow)
  return yuvlow_ != NULL ? *yuvlow_ : *default_instance_->yuvlow_;
}
inline ::c22dlink::YUV* ColorInfo::mutable_yuvlow() {
  set_has_yuvlow();
  if (yuvlow_ == NULL) yuvlow_ = new ::c22dlink::YUV;
  // @@protoc_insertion_point(field_mutable:c22dlink.ColorInfo.yuvLow)
  return yuvlow_;
}
inline ::c22dlink::YUV* ColorInfo::release_yuvlow() {
  clear_has_yuvlow();
  ::c22dlink::YUV* temp = yuvlow_;
  yuvlow_ = NULL;
  return temp;
}
inline void ColorInfo::set_allocated_yuvlow(::c22dlink::YUV* yuvlow) {
  delete yuvlow_;
  yuvlow_ = yuvlow;
  if (yuvlow) {
    set_has_yuvlow();
  } else {
    clear_has_yuvlow();
  }
  // @@protoc_insertion_point(field_set_allocated:c22dlink.ColorInfo.yuvLow)
}

// required .c22dlink.YUV yuvHigh = 7;
inline bool ColorInfo::has_yuvhigh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ColorInfo::set_has_yuvhigh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ColorInfo::clear_has_yuvhigh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ColorInfo::clear_yuvhigh() {
  if (yuvhigh_ != NULL) yuvhigh_->::c22dlink::YUV::Clear();
  clear_has_yuvhigh();
}
inline const ::c22dlink::YUV& ColorInfo::yuvhigh() const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorInfo.yuvHigh)
  return yuvhigh_ != NULL ? *yuvhigh_ : *default_instance_->yuvhigh_;
}
inline ::c22dlink::YUV* ColorInfo::mutable_yuvhigh() {
  set_has_yuvhigh();
  if (yuvhigh_ == NULL) yuvhigh_ = new ::c22dlink::YUV;
  // @@protoc_insertion_point(field_mutable:c22dlink.ColorInfo.yuvHigh)
  return yuvhigh_;
}
inline ::c22dlink::YUV* ColorInfo::release_yuvhigh() {
  clear_has_yuvhigh();
  ::c22dlink::YUV* temp = yuvhigh_;
  yuvhigh_ = NULL;
  return temp;
}
inline void ColorInfo::set_allocated_yuvhigh(::c22dlink::YUV* yuvhigh) {
  delete yuvhigh_;
  yuvhigh_ = yuvhigh;
  if (yuvhigh) {
    set_has_yuvhigh();
  } else {
    clear_has_yuvhigh();
  }
  // @@protoc_insertion_point(field_set_allocated:c22dlink.ColorInfo.yuvHigh)
}

// -------------------------------------------------------------------

// ColorsInfo

// repeated .c22dlink.ColorInfo colors = 1;
inline int ColorsInfo::colors_size() const {
  return colors_.size();
}
inline void ColorsInfo::clear_colors() {
  colors_.Clear();
}
inline const ::c22dlink::ColorInfo& ColorsInfo::colors(int index) const {
  // @@protoc_insertion_point(field_get:c22dlink.ColorsInfo.colors)
  return colors_.Get(index);
}
inline ::c22dlink::ColorInfo* ColorsInfo::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:c22dlink.ColorsInfo.colors)
  return colors_.Mutable(index);
}
inline ::c22dlink::ColorInfo* ColorsInfo::add_colors() {
  // @@protoc_insertion_point(field_add:c22dlink.ColorsInfo.colors)
  return colors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::c22dlink::ColorInfo >&
ColorsInfo::colors() const {
  // @@protoc_insertion_point(field_list:c22dlink.ColorsInfo.colors)
  return colors_;
}
inline ::google::protobuf::RepeatedPtrField< ::c22dlink::ColorInfo >*
ColorsInfo::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:c22dlink.ColorsInfo.colors)
  return &colors_;
}

// -------------------------------------------------------------------

// RequestColors


// @@protoc_insertion_point(namespace_scope)

}  // namespace c22dlink

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_colors_2eproto__INCLUDED
