// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.proto

#ifndef PROTOBUF_frame_2eproto__INCLUDED
#define PROTOBUF_frame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace c22dlink {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_frame_2eproto();
void protobuf_AssignDesc_frame_2eproto();
void protobuf_ShutdownFile_frame_2eproto();

class FrameImage;

enum FrameImage_Type {
  FrameImage_Type_ORIGINAL = 1,
  FrameImage_Type_CLASSIFY = 2
};
bool FrameImage_Type_IsValid(int value);
const FrameImage_Type FrameImage_Type_Type_MIN = FrameImage_Type_ORIGINAL;
const FrameImage_Type FrameImage_Type_Type_MAX = FrameImage_Type_CLASSIFY;
const int FrameImage_Type_Type_ARRAYSIZE = FrameImage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameImage_Type_descriptor();
inline const ::std::string& FrameImage_Type_Name(FrameImage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameImage_Type_descriptor(), value);
}
inline bool FrameImage_Type_Parse(
    const ::std::string& name, FrameImage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameImage_Type>(
    FrameImage_Type_descriptor(), name, value);
}
// ===================================================================

class FrameImage : public ::google::protobuf::Message {
 public:
  FrameImage();
  virtual ~FrameImage();

  FrameImage(const FrameImage& from);

  inline FrameImage& operator=(const FrameImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameImage& default_instance();

  void Swap(FrameImage* other);

  // implements Message ----------------------------------------------

  FrameImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameImage& from);
  void MergeFrom(const FrameImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FrameImage_Type Type;
  static const Type ORIGINAL = FrameImage_Type_ORIGINAL;
  static const Type CLASSIFY = FrameImage_Type_CLASSIFY;
  static inline bool Type_IsValid(int value) {
    return FrameImage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FrameImage_Type_Type_MIN;
  static const Type Type_MAX =
    FrameImage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FrameImage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FrameImage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FrameImage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FrameImage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);

  // required .c22dlink.FrameImage.Type type = 5 [default = ORIGINAL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::c22dlink::FrameImage_Type type() const;
  inline void set_type(::c22dlink::FrameImage_Type value);

  // required int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required bytes image = 4;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 4;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:c22dlink.FrameImage)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_image();
  inline void clear_has_image();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sequence_;
  int type_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::std::string* image_;
  friend void  protobuf_AddDesc_frame_2eproto();
  friend void protobuf_AssignDesc_frame_2eproto();
  friend void protobuf_ShutdownFile_frame_2eproto();

  void InitAsDefaultInstance();
  static FrameImage* default_instance_;
};
// ===================================================================


// ===================================================================

// FrameImage

// required int32 sequence = 1;
inline bool FrameImage::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameImage::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameImage::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameImage::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 FrameImage::sequence() const {
  // @@protoc_insertion_point(field_get:c22dlink.FrameImage.sequence)
  return sequence_;
}
inline void FrameImage::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.FrameImage.sequence)
}

// required .c22dlink.FrameImage.Type type = 5 [default = ORIGINAL];
inline bool FrameImage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameImage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameImage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameImage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::c22dlink::FrameImage_Type FrameImage::type() const {
  // @@protoc_insertion_point(field_get:c22dlink.FrameImage.type)
  return static_cast< ::c22dlink::FrameImage_Type >(type_);
}
inline void FrameImage::set_type(::c22dlink::FrameImage_Type value) {
  assert(::c22dlink::FrameImage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.FrameImage.type)
}

// required int32 width = 2;
inline bool FrameImage::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameImage::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FrameImage::width() const {
  // @@protoc_insertion_point(field_get:c22dlink.FrameImage.width)
  return width_;
}
inline void FrameImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.FrameImage.width)
}

// required int32 height = 3;
inline bool FrameImage::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameImage::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 FrameImage::height() const {
  // @@protoc_insertion_point(field_get:c22dlink.FrameImage.height)
  return height_;
}
inline void FrameImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:c22dlink.FrameImage.height)
}

// required bytes image = 4;
inline bool FrameImage::has_image() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameImage::set_has_image() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FrameImage::clear_has_image() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FrameImage::clear_image() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& FrameImage::image() const {
  // @@protoc_insertion_point(field_get:c22dlink.FrameImage.image)
  return *image_;
}
inline void FrameImage::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set:c22dlink.FrameImage.image)
}
inline void FrameImage::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set_char:c22dlink.FrameImage.image)
}
inline void FrameImage::set_image(const void* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:c22dlink.FrameImage.image)
}
inline ::std::string* FrameImage::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:c22dlink.FrameImage.image)
  return image_;
}
inline ::std::string* FrameImage::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrameImage::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:c22dlink.FrameImage.image)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c22dlink

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c22dlink::FrameImage_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c22dlink::FrameImage_Type>() {
  return ::c22dlink::FrameImage_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frame_2eproto__INCLUDED
