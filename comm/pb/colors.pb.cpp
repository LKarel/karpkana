// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "colors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace c22dlink {

namespace {

const ::google::protobuf::Descriptor* RGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGB_reflection_ = NULL;
const ::google::protobuf::Descriptor* YUV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YUV_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestColors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestColors_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveColors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveColors_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadColors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadColors_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_colors_2eproto() {
  protobuf_AddDesc_colors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "colors.proto");
  GOOGLE_CHECK(file != NULL);
  RGB_descriptor_ = file->message_type(0);
  static const int RGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, b_),
  };
  RGB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGB_descriptor_,
      RGB::default_instance_,
      RGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGB));
  YUV_descriptor_ = file->message_type(1);
  static const int YUV_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YUV, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YUV, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YUV, v_),
  };
  YUV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YUV_descriptor_,
      YUV::default_instance_,
      YUV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YUV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YUV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YUV));
  ColorInfo_descriptor_ = file->message_type(2);
  static const int ColorInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, rgb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, expected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, yuvlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, yuvhigh_),
  };
  ColorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorInfo_descriptor_,
      ColorInfo::default_instance_,
      ColorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorInfo));
  ColorsInfo_descriptor_ = file->message_type(3);
  static const int ColorsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorsInfo, colors_),
  };
  ColorsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorsInfo_descriptor_,
      ColorsInfo::default_instance_,
      ColorsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorsInfo));
  RequestColors_descriptor_ = file->message_type(4);
  static const int RequestColors_offsets_[1] = {
  };
  RequestColors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestColors_descriptor_,
      RequestColors::default_instance_,
      RequestColors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestColors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestColors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestColors));
  SaveColors_descriptor_ = file->message_type(5);
  static const int SaveColors_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveColors, filename_),
  };
  SaveColors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveColors_descriptor_,
      SaveColors::default_instance_,
      SaveColors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveColors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveColors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveColors));
  LoadColors_descriptor_ = file->message_type(6);
  static const int LoadColors_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadColors, filename_),
  };
  LoadColors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadColors_descriptor_,
      LoadColors::default_instance_,
      LoadColors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadColors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadColors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadColors));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_colors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGB_descriptor_, &RGB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YUV_descriptor_, &YUV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorInfo_descriptor_, &ColorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorsInfo_descriptor_, &ColorsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestColors_descriptor_, &RequestColors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveColors_descriptor_, &SaveColors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadColors_descriptor_, &LoadColors::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_colors_2eproto() {
  delete RGB::default_instance_;
  delete RGB_reflection_;
  delete YUV::default_instance_;
  delete YUV_reflection_;
  delete ColorInfo::default_instance_;
  delete ColorInfo_reflection_;
  delete ColorsInfo::default_instance_;
  delete ColorsInfo_reflection_;
  delete RequestColors::default_instance_;
  delete RequestColors_reflection_;
  delete SaveColors::default_instance_;
  delete SaveColors_reflection_;
  delete LoadColors::default_instance_;
  delete LoadColors_reflection_;
}

void protobuf_AddDesc_colors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014colors.proto\022\010c22dlink\"&\n\003RGB\022\t\n\001r\030\001 \002"
    "(\005\022\t\n\001g\030\002 \002(\005\022\t\n\001b\030\003 \002(\005\"&\n\003YUV\022\t\n\001y\030\001 \002"
    "(\005\022\t\n\001u\030\002 \002(\005\022\t\n\001v\030\003 \002(\005\"\241\001\n\tColorInfo\022\n"
    "\n\002id\030\001 \002(\005\022\032\n\003rgb\030\002 \001(\0132\r.c22dlink.RGB\022\014"
    "\n\004name\030\003 \001(\t\022\r\n\005merge\030\004 \002(\001\022\020\n\010expected\030"
    "\005 \002(\005\022\035\n\006yuvLow\030\006 \002(\0132\r.c22dlink.YUV\022\036\n\007"
    "yuvHigh\030\007 \002(\0132\r.c22dlink.YUV\"1\n\nColorsIn"
    "fo\022#\n\006colors\030\001 \003(\0132\023.c22dlink.ColorInfo\""
    "\017\n\rRequestColors\"\036\n\nSaveColors\022\020\n\010filena"
    "me\030\001 \002(\t\"\036\n\nLoadColors\022\020\n\010filename\030\001 \002(\t"
    "B\002P\001", 404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "colors.proto", &protobuf_RegisterTypes);
  RGB::default_instance_ = new RGB();
  YUV::default_instance_ = new YUV();
  ColorInfo::default_instance_ = new ColorInfo();
  ColorsInfo::default_instance_ = new ColorsInfo();
  RequestColors::default_instance_ = new RequestColors();
  SaveColors::default_instance_ = new SaveColors();
  LoadColors::default_instance_ = new LoadColors();
  RGB::default_instance_->InitAsDefaultInstance();
  YUV::default_instance_->InitAsDefaultInstance();
  ColorInfo::default_instance_->InitAsDefaultInstance();
  ColorsInfo::default_instance_->InitAsDefaultInstance();
  RequestColors::default_instance_->InitAsDefaultInstance();
  SaveColors::default_instance_->InitAsDefaultInstance();
  LoadColors::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_colors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_colors_2eproto {
  StaticDescriptorInitializer_colors_2eproto() {
    protobuf_AddDesc_colors_2eproto();
  }
} static_descriptor_initializer_colors_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RGB::kRFieldNumber;
const int RGB::kGFieldNumber;
const int RGB::kBFieldNumber;
#endif  // !_MSC_VER

RGB::RGB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.RGB)
}

void RGB::InitAsDefaultInstance() {
}

RGB::RGB(const RGB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.RGB)
}

void RGB::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:c22dlink.RGB)
  SharedDtor();
}

void RGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RGB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGB_descriptor_;
}

const RGB& RGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

RGB* RGB::default_instance_ = NULL;

RGB* RGB::New() const {
  return new RGB;
}

void RGB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RGB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(r_, b_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.RGB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 r = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // required int32 g = 2;
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // required int32 b = 3;
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.RGB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.RGB)
  return false;
#undef DO_
}

void RGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.RGB)
  // required int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // required int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.RGB)
}

::google::protobuf::uint8* RGB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.RGB)
  // required int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // required int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // required int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.RGB)
  return target;
}

int RGB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // required int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // required int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGB::MergeFrom(const RGB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB::CopyFrom(const RGB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RGB::Swap(RGB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGB_descriptor_;
  metadata.reflection = RGB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YUV::kYFieldNumber;
const int YUV::kUFieldNumber;
const int YUV::kVFieldNumber;
#endif  // !_MSC_VER

YUV::YUV()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.YUV)
}

void YUV::InitAsDefaultInstance() {
}

YUV::YUV(const YUV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.YUV)
}

void YUV::SharedCtor() {
  _cached_size_ = 0;
  y_ = 0;
  u_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YUV::~YUV() {
  // @@protoc_insertion_point(destructor:c22dlink.YUV)
  SharedDtor();
}

void YUV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YUV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YUV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YUV_descriptor_;
}

const YUV& YUV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

YUV* YUV::default_instance_ = NULL;

YUV* YUV::New() const {
  return new YUV;
}

void YUV::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YUV*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(y_, v_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YUV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.YUV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 y = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_u;
        break;
      }

      // required int32 u = 2;
      case 2: {
        if (tag == 16) {
         parse_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_v;
        break;
      }

      // required int32 v = 3;
      case 3: {
        if (tag == 24) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.YUV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.YUV)
  return false;
#undef DO_
}

void YUV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.YUV)
  // required int32 y = 1;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->y(), output);
  }

  // required int32 u = 2;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->u(), output);
  }

  // required int32 v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.YUV)
}

::google::protobuf::uint8* YUV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.YUV)
  // required int32 y = 1;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->y(), target);
  }

  // required int32 u = 2;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->u(), target);
  }

  // required int32 v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.YUV)
  return target;
}

int YUV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 y = 1;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 u = 2;
    if (has_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->u());
    }

    // required int32 v = 3;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YUV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YUV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YUV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YUV::MergeFrom(const YUV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YUV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YUV::CopyFrom(const YUV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YUV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void YUV::Swap(YUV* other) {
  if (other != this) {
    std::swap(y_, other->y_);
    std::swap(u_, other->u_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YUV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YUV_descriptor_;
  metadata.reflection = YUV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColorInfo::kIdFieldNumber;
const int ColorInfo::kRgbFieldNumber;
const int ColorInfo::kNameFieldNumber;
const int ColorInfo::kMergeFieldNumber;
const int ColorInfo::kExpectedFieldNumber;
const int ColorInfo::kYuvLowFieldNumber;
const int ColorInfo::kYuvHighFieldNumber;
#endif  // !_MSC_VER

ColorInfo::ColorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.ColorInfo)
}

void ColorInfo::InitAsDefaultInstance() {
  rgb_ = const_cast< ::c22dlink::RGB*>(&::c22dlink::RGB::default_instance());
  yuvlow_ = const_cast< ::c22dlink::YUV*>(&::c22dlink::YUV::default_instance());
  yuvhigh_ = const_cast< ::c22dlink::YUV*>(&::c22dlink::YUV::default_instance());
}

ColorInfo::ColorInfo(const ColorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.ColorInfo)
}

void ColorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  rgb_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_ = 0;
  expected_ = 0;
  yuvlow_ = NULL;
  yuvhigh_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorInfo::~ColorInfo() {
  // @@protoc_insertion_point(destructor:c22dlink.ColorInfo)
  SharedDtor();
}

void ColorInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete rgb_;
    delete yuvlow_;
    delete yuvhigh_;
  }
}

void ColorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorInfo_descriptor_;
}

const ColorInfo& ColorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

ColorInfo* ColorInfo::default_instance_ = NULL;

ColorInfo* ColorInfo::New() const {
  return new ColorInfo;
}

void ColorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, merge_);
    if (has_rgb()) {
      if (rgb_ != NULL) rgb_->::c22dlink::RGB::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_yuvlow()) {
      if (yuvlow_ != NULL) yuvlow_->::c22dlink::YUV::Clear();
    }
    if (has_yuvhigh()) {
      if (yuvhigh_ != NULL) yuvhigh_->::c22dlink::YUV::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.ColorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rgb;
        break;
      }

      // optional .c22dlink.RGB rgb = 2;
      case 2: {
        if (tag == 18) {
         parse_rgb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_merge;
        break;
      }

      // required double merge = 4;
      case 4: {
        if (tag == 33) {
         parse_merge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &merge_)));
          set_has_merge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expected;
        break;
      }

      // required int32 expected = 5;
      case 5: {
        if (tag == 40) {
         parse_expected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expected_)));
          set_has_expected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_yuvLow;
        break;
      }

      // required .c22dlink.YUV yuvLow = 6;
      case 6: {
        if (tag == 50) {
         parse_yuvLow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yuvlow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_yuvHigh;
        break;
      }

      // required .c22dlink.YUV yuvHigh = 7;
      case 7: {
        if (tag == 58) {
         parse_yuvHigh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yuvhigh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.ColorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.ColorInfo)
  return false;
#undef DO_
}

void ColorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.ColorInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .c22dlink.RGB rgb = 2;
  if (has_rgb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rgb(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required double merge = 4;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->merge(), output);
  }

  // required int32 expected = 5;
  if (has_expected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expected(), output);
  }

  // required .c22dlink.YUV yuvLow = 6;
  if (has_yuvlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->yuvlow(), output);
  }

  // required .c22dlink.YUV yuvHigh = 7;
  if (has_yuvhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yuvhigh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.ColorInfo)
}

::google::protobuf::uint8* ColorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.ColorInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .c22dlink.RGB rgb = 2;
  if (has_rgb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rgb(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required double merge = 4;
  if (has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->merge(), target);
  }

  // required int32 expected = 5;
  if (has_expected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expected(), target);
  }

  // required .c22dlink.YUV yuvLow = 6;
  if (has_yuvlow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->yuvlow(), target);
  }

  // required .c22dlink.YUV yuvHigh = 7;
  if (has_yuvhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->yuvhigh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.ColorInfo)
  return target;
}

int ColorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .c22dlink.RGB rgb = 2;
    if (has_rgb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rgb());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double merge = 4;
    if (has_merge()) {
      total_size += 1 + 8;
    }

    // required int32 expected = 5;
    if (has_expected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expected());
    }

    // required .c22dlink.YUV yuvLow = 6;
    if (has_yuvlow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yuvlow());
    }

    // required .c22dlink.YUV yuvHigh = 7;
    if (has_yuvhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yuvhigh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorInfo::MergeFrom(const ColorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rgb()) {
      mutable_rgb()->::c22dlink::RGB::MergeFrom(from.rgb());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_merge()) {
      set_merge(from.merge());
    }
    if (from.has_expected()) {
      set_expected(from.expected());
    }
    if (from.has_yuvlow()) {
      mutable_yuvlow()->::c22dlink::YUV::MergeFrom(from.yuvlow());
    }
    if (from.has_yuvhigh()) {
      mutable_yuvhigh()->::c22dlink::YUV::MergeFrom(from.yuvhigh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorInfo::CopyFrom(const ColorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;

  if (has_rgb()) {
    if (!this->rgb().IsInitialized()) return false;
  }
  if (has_yuvlow()) {
    if (!this->yuvlow().IsInitialized()) return false;
  }
  if (has_yuvhigh()) {
    if (!this->yuvhigh().IsInitialized()) return false;
  }
  return true;
}

void ColorInfo::Swap(ColorInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rgb_, other->rgb_);
    std::swap(name_, other->name_);
    std::swap(merge_, other->merge_);
    std::swap(expected_, other->expected_);
    std::swap(yuvlow_, other->yuvlow_);
    std::swap(yuvhigh_, other->yuvhigh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorInfo_descriptor_;
  metadata.reflection = ColorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColorsInfo::kColorsFieldNumber;
#endif  // !_MSC_VER

ColorsInfo::ColorsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.ColorsInfo)
}

void ColorsInfo::InitAsDefaultInstance() {
}

ColorsInfo::ColorsInfo(const ColorsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.ColorsInfo)
}

void ColorsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorsInfo::~ColorsInfo() {
  // @@protoc_insertion_point(destructor:c22dlink.ColorsInfo)
  SharedDtor();
}

void ColorsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorsInfo_descriptor_;
}

const ColorsInfo& ColorsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

ColorsInfo* ColorsInfo::default_instance_ = NULL;

ColorsInfo* ColorsInfo::New() const {
  return new ColorsInfo;
}

void ColorsInfo::Clear() {
  colors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.ColorsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .c22dlink.ColorInfo colors = 1;
      case 1: {
        if (tag == 10) {
         parse_colors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_colors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.ColorsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.ColorsInfo)
  return false;
#undef DO_
}

void ColorsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.ColorsInfo)
  // repeated .c22dlink.ColorInfo colors = 1;
  for (int i = 0; i < this->colors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.ColorsInfo)
}

::google::protobuf::uint8* ColorsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.ColorsInfo)
  // repeated .c22dlink.ColorInfo colors = 1;
  for (int i = 0; i < this->colors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->colors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.ColorsInfo)
  return target;
}

int ColorsInfo::ByteSize() const {
  int total_size = 0;

  // repeated .c22dlink.ColorInfo colors = 1;
  total_size += 1 * this->colors_size();
  for (int i = 0; i < this->colors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorsInfo::MergeFrom(const ColorsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  colors_.MergeFrom(from.colors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorsInfo::CopyFrom(const ColorsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorsInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->colors())) return false;
  return true;
}

void ColorsInfo::Swap(ColorsInfo* other) {
  if (other != this) {
    colors_.Swap(&other->colors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorsInfo_descriptor_;
  metadata.reflection = ColorsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestColors::RequestColors()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.RequestColors)
}

void RequestColors::InitAsDefaultInstance() {
}

RequestColors::RequestColors(const RequestColors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.RequestColors)
}

void RequestColors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestColors::~RequestColors() {
  // @@protoc_insertion_point(destructor:c22dlink.RequestColors)
  SharedDtor();
}

void RequestColors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestColors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestColors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestColors_descriptor_;
}

const RequestColors& RequestColors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

RequestColors* RequestColors::default_instance_ = NULL;

RequestColors* RequestColors::New() const {
  return new RequestColors;
}

void RequestColors::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestColors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.RequestColors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.RequestColors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.RequestColors)
  return false;
#undef DO_
}

void RequestColors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.RequestColors)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.RequestColors)
}

::google::protobuf::uint8* RequestColors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.RequestColors)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.RequestColors)
  return target;
}

int RequestColors::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestColors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestColors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestColors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestColors::MergeFrom(const RequestColors& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestColors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestColors::CopyFrom(const RequestColors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestColors::IsInitialized() const {

  return true;
}

void RequestColors::Swap(RequestColors* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestColors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestColors_descriptor_;
  metadata.reflection = RequestColors_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveColors::kFilenameFieldNumber;
#endif  // !_MSC_VER

SaveColors::SaveColors()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.SaveColors)
}

void SaveColors::InitAsDefaultInstance() {
}

SaveColors::SaveColors(const SaveColors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.SaveColors)
}

void SaveColors::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveColors::~SaveColors() {
  // @@protoc_insertion_point(destructor:c22dlink.SaveColors)
  SharedDtor();
}

void SaveColors::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void SaveColors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveColors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveColors_descriptor_;
}

const SaveColors& SaveColors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

SaveColors* SaveColors::default_instance_ = NULL;

SaveColors* SaveColors::New() const {
  return new SaveColors;
}

void SaveColors::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveColors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.SaveColors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.SaveColors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.SaveColors)
  return false;
#undef DO_
}

void SaveColors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.SaveColors)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.SaveColors)
}

::google::protobuf::uint8* SaveColors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.SaveColors)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.SaveColors)
  return target;
}

int SaveColors::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveColors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveColors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveColors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveColors::MergeFrom(const SaveColors& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveColors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveColors::CopyFrom(const SaveColors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveColors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SaveColors::Swap(SaveColors* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveColors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveColors_descriptor_;
  metadata.reflection = SaveColors_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadColors::kFilenameFieldNumber;
#endif  // !_MSC_VER

LoadColors::LoadColors()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:c22dlink.LoadColors)
}

void LoadColors::InitAsDefaultInstance() {
}

LoadColors::LoadColors(const LoadColors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:c22dlink.LoadColors)
}

void LoadColors::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadColors::~LoadColors() {
  // @@protoc_insertion_point(destructor:c22dlink.LoadColors)
  SharedDtor();
}

void LoadColors::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void LoadColors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadColors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadColors_descriptor_;
}

const LoadColors& LoadColors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colors_2eproto();
  return *default_instance_;
}

LoadColors* LoadColors::default_instance_ = NULL;

LoadColors* LoadColors::New() const {
  return new LoadColors;
}

void LoadColors::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadColors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c22dlink.LoadColors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c22dlink.LoadColors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c22dlink.LoadColors)
  return false;
#undef DO_
}

void LoadColors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c22dlink.LoadColors)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c22dlink.LoadColors)
}

::google::protobuf::uint8* LoadColors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c22dlink.LoadColors)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c22dlink.LoadColors)
  return target;
}

int LoadColors::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadColors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadColors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadColors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadColors::MergeFrom(const LoadColors& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadColors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadColors::CopyFrom(const LoadColors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadColors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoadColors::Swap(LoadColors* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadColors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadColors_descriptor_;
  metadata.reflection = LoadColors_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c22dlink

// @@protoc_insertion_point(global_scope)
